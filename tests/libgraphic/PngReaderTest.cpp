#include <libgraphic/png/PngReader.h>
#include <libtest/Asserts.h>

#include "tests/Driver.h"

// Testdata from http://www.schaik.com/pngsuite/pngsuite_bas_png.html

TEST(pngreader_read_8bit_grayscale)
{
    uint8_t basn0g08_png[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x56, 0x11, 0x25, 0x28, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x41, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x63,
        0x64, 0x60, 0x24, 0x00, 0x14, 0x08, 0xc8, 0xb3, 0x0c, 0x05, 0x05, 0x8c,
        0x0f, 0x08, 0x29, 0xf8, 0xf7, 0x1f, 0x3f, 0x60, 0x79, 0x30, 0x1c, 0x14,
        0x30, 0xca, 0x11, 0x90, 0x67, 0x64, 0xa2, 0x79, 0x5c, 0x0c, 0x06, 0x05,
        0x8c, 0x8f, 0xf0, 0xca, 0xfe, 0xff, 0xcf, 0xf8, 0x87, 0xe6, 0x71, 0x31,
        0x18, 0x14, 0x30, 0xca, 0xe0, 0x95, 0x65, 0x64, 0x04, 0x00, 0x50, 0xe5,
        0xfe, 0x71, 0x35, 0xe2, 0xd8, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
        0x4e, 0x44, 0xae, 0x42, 0x60, 0x82};

    IO::MemoryReader mem_reader(basn0g08_png, sizeof(basn0g08_png));
    Graphic::PngReader png_reader(mem_reader);
    assert_true(png_reader.valid());
    assert_equal(png_reader.width(), 32);
    assert_equal(png_reader.height(), 32);
}

TEST(pngreader_read_8bit_rgb)
{
    uint8_t basn2c08_png[] = {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
        0x08, 0x02, 0x00, 0x00, 0x00, 0xfc, 0x18, 0xed, 0xa3, 0x00, 0x00, 0x00,
        0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x01, 0x86, 0xa0, 0x31, 0xe8, 0x96,
        0x5f, 0x00, 0x00, 0x00, 0x48, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed,
        0xd5, 0xc1, 0x09, 0x00, 0x30, 0x0c, 0x02, 0x40, 0x85, 0xec, 0x91, 0xfd,
        0xb7, 0x72, 0x13, 0x3b, 0x44, 0x2b, 0xf4, 0xa1, 0xf8, 0xce, 0xe1, 0x2b,
        0xb4, 0x0d, 0x04, 0x3b, 0x80, 0x0a, 0x14, 0xf8, 0x1c, 0xa0, 0xed, 0xe4,
        0x7d, 0x4c, 0x78, 0x40, 0x81, 0x02, 0x0f, 0x4a, 0x87, 0x1f, 0xc2, 0x84,
        0x07, 0x14, 0x28, 0xf0, 0xa0, 0x74, 0x38, 0x23, 0xa9, 0x40, 0x81, 0xbb,
        0x70, 0x77, 0xa3, 0xc0, 0x01, 0x82, 0xb1, 0xf9, 0x5e, 0x0f, 0x40, 0xcf,
        0x4b, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
        0x82};

    IO::MemoryReader mem_reader(basn2c08_png, sizeof(basn2c08_png));
    Graphic::PngReader png_reader(mem_reader);
    assert_true(png_reader.valid());
    assert_equal(png_reader.width(), 32);
    assert_equal(png_reader.height(), 32);
}